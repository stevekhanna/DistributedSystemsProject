Fri Jan 22 16:55:31 MST 2021
java

Fri Jan 22 16:56:26 MST 2021
java

Fri Jan 22 17:04:34 MST 2021
java

Fri Jan 22 17:06:47 MST 2021
java

Fri Jan 22 17:07:40 MST 2021
java

Fri Jan 22 17:10:21 MST 2021
java

Fri Jan 22 17:15:00 MST 2021
java
灡捫慧攠䍬楥湴㬊੩浰潲琠橡癡⹩漮⨻੩浰潲琠橡癡⹮整⹓潣步琻੩浰潲琠橡癡⹮楯⹣桡牳整⹓瑡湤慲摃桡牳整猻੩浰潲琠橡癡⹮楯⹦楬攮䙩汥卹獴敭猻੩浰潲琠橡癡⹮楯⹦楬攮䙩汥猻੩浰潲琠橡癡⹮楯⹦楬攮偡瑨㬊業灯牴⁪慶愮湩漮晩汥⹐慴桳㬊ੰ畢汩挠捬慳猠䍬楥湴⁻ਠ†⁰物癡瑥⁓瑲楮朠獥牶敲䥐‽•汯捡汨潳琢㬊††灲楶慴攠楮琠灯牴‽‱㈳㐵㬊ਠ†⁂畦晥牥摒敡摥爠牥慤敲㬊††䉵晦敲敤坲楴敲⁷物瑥爻ਠ†⁰畢汩挠䍬楥湴⡓瑲楮朠獥牶敲䥐Ⱐ楮琠灯牴⥻ਠ†††⁴桩献獥牶敲䥐‽⁳敲癥牉倻ਠ†††⁴桩献灯牴‽⁰潲琻ਠ†⁽ਊ††灲楶慴攠癯楤⁨慮摬敒敱略獴⡓潣步琠獯捫⥻ਊ††††瑲祻ਠ†††††⁲敡摥爠㴠湥眠䉵晦敲敤剥慤敲⡮敷⁉湰畴却牥慭剥慤敲⡳潣欮来瑉湰畴却牥慭⠩⤩㬊††††††睲楴敲‽⁮敷⁂畦晥牥摗物瑥爨湥眠併瑰畴却牥慭坲楴敲⡳潣欮来瑏畴灵瑓瑲敡洨⤩⤻ਠ†††††⁓瑲楮朠牥煵敳琻ਠ†††††⁷桩汥 ⡲敱略獴‽⁲敡摥爮牥慤䱩湥⠩⤠ℽ⁮畬氩笊††††††††卹獴敭⹯畴⹰物湴汮⡲敱略獴⤻ਠ†††††††⁓瑲楮朠牥獰潮獥‽•∻ਊ††††††††獷楴捨⡲敱略獴⤠笊††††††††††捡獥•来琠瑥慭⁮慭攢㨊††††††††††††牥獰潮獥‽•却敶攠慮搠䥳獡捫屮∻ਠ†††††††††††⁓祳瑥洮潵琮灲楮瑬渨≗物瑩湧⁲敳灯湳攠湯眺•‫⁲敳灯湳攩㬊††††††††††††睲楴敲⹷物瑥⡲敳灯湳攩㬊††††††††††††睲楴敲⹦汵獨⠩㬊††††††††††††扲敡欻ਠ†††††††††⁣慳攠≧整⁣潤攢㨊††††††††††††却物湧⁬慮杵慧攠㴠≪慶慜渢㬊ਠ†††††††††††⁐慴栠灡瑨‽⁆楬敓祳瑥浳⹧整䑥晡畬琨⤮来瑐慴栨≳牣∩㬊††††††††††††却物湧⁳‽⁰慴栮瑯䅢獯汵瑥偡瑨⠩⹴潓瑲楮木⤻ਠ†††††††††††⁩映⡳⹣潮瑡楮猨∯∩⥻猫㴢⼢㭽敬獥筳⬽≜尢㭽ਠ†††††††††††⁰慴栠㴠䙩汥卹獴敭献来瑄敦慵汴⠩⹧整偡瑨⡳⬢䍬楥湴∩㬊††††††††††††猠㴠灡瑨⹴潁扳潬畴敐慴栨⤮瑯却物湧⠩㬊††††††††††††楦 献捯湴慩湳⠢⼢⤩筳⬽∯∻絥汳敻猫㴢屜∻紊††††††††††††灡瑨‽⁆楬敓祳瑥浳⹧整䑥晡畬琨⤮来瑐慴栨猫≃汩敮琮橡癡∩㬊††††††††††††猠㴠灡瑨⹴潁扳潬畴敐慴栨⤮瑯却物湧⠩㬊††††††††††††卹獴敭⹯畴⹰物湴汮⠢䍵牲敮琠牥污瑩癥⁰慴栠楳㨠∠⬠猩㬊ਯ⼠†††††††††††⁐慴栠灡瑨‽⁆楬敓祳瑥浳⹧整䑥晡畬琨⤮来瑐慴栨∢⤮瑯䅢獯汵瑥偡瑨⠩㬊⼯††††††††††††卹獴敭⹯畴⹰物湴汮⡰慴栮瑯却物湧⠩⤻ਯ⼠†††††††††††⁓瑲楮朠捯摥‽⁆楬敳⹲敡摓瑲楮木灡瑨Ⱐ却慮摡牤䍨慲獥瑳⹕呆弱㘩㬊††††††††††††却物湧⁣潤攠㴠䙩汥献牥慤却物湧⡰慴栬⁓瑡湤慲摃桡牳整献啔䙟ㄶ⤫≜渢㬊††††††††††††却物湧⁥湤佦䍯摥‽•⸮⹜渢㬊††††††††††††牥獰潮獥‽⁬慮杵慧攫捯摥⭥湤佦䍯摥㬊††††††††††††睲楴敲⹷物瑥⡲敳灯湳攩㬊††††††††††††睲楴敲⹦汵獨⠩㬊††††††††††††扲敡欻ਠ†††††††††⁤敦慵汴㨊††††††††††††卹獴敭⹯畴⹰物湴汮⠢剥煵敳琠湯琠牥捯杮楺敤∩㬊††††††††紊††††††紊††††††牥慤敲⹣汯獥⠩㬊††††††睲楴敲⹣汯獥⠩㬊††††紊††††捡瑣栨䥏䕸捥灴楯渠攩笊††††††攮灲楮瑓瑡捫呲慣攨⤻ਊ††††紊††紊ਊ††灵扬楣⁶潩搠獴慲琨⤠瑨牯睳⁉佅硣数瑩潮笊ਠ†††⁓潣步琠獯捫‽⁮敷⁓潣步琨獥牶敲䥐Ⱐ灯牴⤻ਠ†††⁨慮摬敒敱略獴⡳潣欩㬊††††獯捫⹣汯獥⠩㬊ਊ††紊紊
Fri Jan 22 17:15:42 MST 2021
java
灡捫慧攠䍬楥湴㬊੩浰潲琠橡癡⹩漮⨻੩浰潲琠橡癡⹮整⹓潣步琻੩浰潲琠橡癡⹮楯⹣桡牳整⹓瑡湤慲摃桡牳整猻੩浰潲琠橡癡⹮楯⹦楬攮䙩汥卹獴敭猻੩浰潲琠橡癡⹮楯⹦楬攮䙩汥猻੩浰潲琠橡癡⹮楯⹦楬攮偡瑨㬊業灯牴⁪慶愮湩漮晩汥⹐慴桳㬊ੰ畢汩挠捬慳猠䍬楥湴⁻ਠ†⁰物癡瑥⁓瑲楮朠獥牶敲䥐‽•汯捡汨潳琢㬊††灲楶慴攠楮琠灯牴‽‱㈳㐵㬊ਠ†⁂畦晥牥摒敡摥爠牥慤敲㬊††䉵晦敲敤坲楴敲⁷物瑥爻ਠ†⁰畢汩挠䍬楥湴⡓瑲楮朠獥牶敲䥐Ⱐ楮琠灯牴⥻ਠ†††⁴桩献獥牶敲䥐‽⁳敲癥牉倻ਠ†††⁴桩献灯牴‽⁰潲琻ਠ†⁽ਊ††灲楶慴攠癯楤⁨慮摬敒敱略獴⡓潣步琠獯捫⥻ਊ††††瑲祻ਠ†††††⁲敡摥爠㴠湥眠䉵晦敲敤剥慤敲⡮敷⁉湰畴却牥慭剥慤敲⡳潣欮来瑉湰畴却牥慭⠩⤩㬊††††††睲楴敲‽⁮敷⁂畦晥牥摗物瑥爨湥眠併瑰畴却牥慭坲楴敲⡳潣欮来瑏畴灵瑓瑲敡洨⤩⤻ਠ†††††⁓瑲楮朠牥煵敳琻ਠ†††††⁷桩汥 ⡲敱略獴‽⁲敡摥爮牥慤䱩湥⠩⤠ℽ⁮畬氩笊††††††††卹獴敭⹯畴⹰物湴汮⡲敱略獴⤻ਠ†††††††⁓瑲楮朠牥獰潮獥‽•∻ਊ††††††††獷楴捨⡲敱略獴⤠笊††††††††††捡獥•来琠瑥慭⁮慭攢㨊††††††††††††牥獰潮獥‽•却敶攠慮搠䥳獡捫屮∻ਠ†††††††††††⁓祳瑥洮潵琮灲楮瑬渨≗物瑩湧⁲敳灯湳攠湯眺•‫⁲敳灯湳攩㬊††††††††††††睲楴敲⹷物瑥⡲敳灯湳攩㬊††††††††††††睲楴敲⹦汵獨⠩㬊††††††††††††扲敡欻ਠ†††††††††⁣慳攠≧整⁣潤攢㨊††††††††††††却物湧⁬慮杵慧攠㴠≪慶慜渢㬊ਠ†††††††††††⁐慴栠灡瑨‽⁆楬敓祳瑥浳⹧整䑥晡畬琨⤮来瑐慴栨≳牣∩㬊††††††††††††却物湧⁳‽⁰慴栮瑯䅢獯汵瑥偡瑨⠩⹴潓瑲楮木⤻ਠ†††††††††††⁩映⡳⹣潮瑡楮猨∯∩⥻猫㴢⼢㭽敬獥筳⬽≜尢㭽ਠ†††††††††††⁰慴栠㴠䙩汥卹獴敭献来瑄敦慵汴⠩⹧整偡瑨⡳⬢䍬楥湴∩㬊††††††††††††猠㴠灡瑨⹴潁扳潬畴敐慴栨⤮瑯却物湧⠩㬊††††††††††††楦 献捯湴慩湳⠢⼢⤩筳⬽∯∻絥汳敻猫㴢屜∻紊††††††††††††灡瑨‽⁆楬敓祳瑥浳⹧整䑥晡畬琨⤮来瑐慴栨猫≃汩敮琮橡癡∩㬊††††††††††††猠㴠灡瑨⹴潁扳潬畴敐慴栨⤮瑯却物湧⠩㬊††††††††††††卹獴敭⹯畴⹰物湴汮⠢䍵牲敮琠牥污瑩癥⁰慴栠楳㨠∠⬠猩㬊ਯ⼠†††††††††††⁐慴栠灡瑨‽⁆楬敓祳瑥浳⹧整䑥晡畬琨⤮来瑐慴栨∢⤮瑯䅢獯汵瑥偡瑨⠩㬊⼯††††††††††††卹獴敭⹯畴⹰物湴汮⡰慴栮瑯却物湧⠩⤻ਯ⼠†††††††††††⁓瑲楮朠捯摥‽⁆楬敳⹲敡摓瑲楮木灡瑨Ⱐ却慮摡牤䍨慲獥瑳⹕呆弱㘩㬊††††††††††††却物湧⁣潤攠㴠䙩汥献牥慤却物湧⡰慴栬⁓瑡湤慲摃桡牳整献啔䙟ㄶ⤫≜渢㬊††††††††††††卹獴敭⹯畴⹰物湴汮⡣潤攩㬊††††††††††††却物湧⁥湤佦䍯摥‽•⸮⹜渢㬊††††††††††††牥獰潮獥‽⁬慮杵慧攫捯摥⭥湤佦䍯摥㬊††††††††††††睲楴敲⹷物瑥⡲敳灯湳攩㬊††††††††††††睲楴敲⹦汵獨⠩㬊††††††††††††扲敡欻ਠ†††††††††⁤敦慵汴㨊††††††††††††卹獴敭⹯畴⹰物湴汮⠢剥煵敳琠湯琠牥捯杮楺敤∩㬊††††††††紊††††††紊††††††牥慤敲⹣汯獥⠩㬊††††††睲楴敲⹣汯獥⠩㬊††††紊††††捡瑣栨䥏䕸捥灴楯渠攩笊††††††攮灲楮瑓瑡捫呲慣攨⤻ਊ††††紊††紊ਊ††灵扬楣⁶潩搠獴慲琨⤠瑨牯睳⁉佅硣数瑩潮笊ਠ†††⁓潣步琠獯捫‽⁮敷⁓潣步琨獥牶敲䥐Ⱐ灯牴⤻ਠ†††⁨慮摬敒敱略獴⡳潣欩㬊††††獯捫⹣汯獥⠩㬊ਊ††紊紊
Fri Jan 22 17:17:17 MST 2021
java
package Client;

import java.io.*;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

public class Client {
    private String serverIP = "localhost";
    private int port = 12345;

    BufferedReader reader;
    BufferedWriter writer;
    public Client(String serverIP, int port){
        this.serverIP = serverIP;
        this.port = port;
    }

    private void handleRequest(Socket sock){

        try{
            reader = new BufferedReader(new InputStreamReader(sock.getInputStream()));
            writer = new BufferedWriter(new OutputStreamWriter(sock.getOutputStream()));
            String request;
            while ((request = reader.readLine()) != null){
                System.out.println(request);
                String response = "";

                switch(request) {
                    case "get team name":
                        response = "Steve and Issack\n";
                        System.out.println("Writing response now: " + response);
                        writer.write(response);
                        writer.flush();
                        break;
                    case "get code":
                        String language = "java\n";

                        Path path = FileSystems.getDefault().getPath("src");
                        String s = path.toAbsolutePath().toString();
                        if (s.contains("/")){s+="/";}else{s+="\\";}
                        path = FileSystems.getDefault().getPath(s+"Client");
                        s = path.toAbsolutePath().toString();
                        if (s.contains("/")){s+="/";}else{s+="\\";}
                        path = FileSystems.getDefault().getPath(s+"Client.java");
                        s = path.toAbsolutePath().toString();
                        System.out.println("Current relative path is: " + s);

//                        Path path = FileSystems.getDefault().getPath("").toAbsolutePath();
//                        System.out.println(path.toString());
//                        String code = Files.readString(path, StandardCharsets.UTF_16);
                        String code = Files.readString(path, StandardCharsets.US_ASCII)+"\n";
                        System.out.println(code);
                        String endOfCode = "...\n";
                        response = language+code+endOfCode;
                        writer.write(response);
                        writer.flush();
                        break;
                    default:
                        System.out.println("Request not recognized");
                }
            }
            reader.close();
            writer.close();
        }
        catch(IOException e){
            e.printStackTrace();

        }
    }


    public void start() throws IOException{

        Socket sock = new Socket(serverIP, port);
        handleRequest(sock);
        sock.close();


    }
}

Sat Jan 23 15:45:15 MST 2021
java
package Client;

import java.io.*;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

public class Client {
    private String serverIP = "localhost";
    private int port = 12345;

    BufferedReader reader;
    BufferedWriter writer;
    public Client(String serverIP, int port){
        this.serverIP = serverIP;
        this.port = port;
    }

    private void handleRequest(Socket sock){

        try{
            reader = new BufferedReader(new InputStreamReader(sock.getInputStream()));
            writer = new BufferedWriter(new OutputStreamWriter(sock.getOutputStream()));
            String request;
            while ((request = reader.readLine()) != null){
                System.out.println(request);
                String response = "";

                switch(request) {
                    case "get team name":
                        response = "Steve and Issack\n";
                        System.out.println("Writing response now: " + response);
                        writer.write(response);
                        writer.flush();
                    break;
                    case "get code":
                        String language = "java\n";

                        Path path = FileSystems.getDefault().getPath("src");
                        String s = path.toAbsolutePath().toString();
                        if (s.contains("/")){s+="/";}else{s+="\\";}
                        path = FileSystems.getDefault().getPath(s+"Client");
                        s = path.toAbsolutePath().toString();
                        if (s.contains("/")){s+="/";}else{s+="\\";}
                        path = FileSystems.getDefault().getPath(s+"Client.java");
                        s = path.toAbsolutePath().toString();
                        System.out.println("Current relative path is: " + s);

                        String code = Files.readString(path, StandardCharsets.US_ASCII)+"\n";
                        System.out.println(code);

                        String endOfCode = "...\n";
                        response = language+code+endOfCode;
                        writer.write(response);
                        writer.flush();
                    break;
                    case "receive peers":

                    break;
                    default:
                        System.out.println("Request not recognized");
                }
            }
            reader.close();
            writer.close();
        }
        catch(IOException e){
            e.printStackTrace();

        }
    }


    public void start() throws IOException{

        Socket sock = new Socket(serverIP, port);
        handleRequest(sock);
        sock.close();


    }
}

Sat Jan 23 15:51:59 MST 2021
java
package Client;

import java.io.*;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

public class Client {
    private String serverIP = "localhost";
    private int port = 12345;

    BufferedReader reader;
    BufferedWriter writer;
    public Client(String serverIP, int port){
        this.serverIP = serverIP;
        this.port = port;
    }

    private void handleRequest(Socket sock){

        try{
            reader = new BufferedReader(new InputStreamReader(sock.getInputStream()));
            writer = new BufferedWriter(new OutputStreamWriter(sock.getOutputStream()));
            String request;
            while ((request = reader.readLine()) != null){
                System.out.println(request);
                String response = "";

                switch(request) {
                    case "get team name":
                        response = "Steve and Issack\n";
                        System.out.println("Writing response now: " + response);
                        writer.write(response);
                        writer.flush();
                    break;
                    case "get code":

                        Path p = Paths.get("Client.java");
                        Path folder = FileSystems.getDefault().getPath(new String("./")).toAbsolutePath().getParent();

                        System.out.println(folder.toString());



                        String language = "java\n";

                        Path path = FileSystems.getDefault().getPath("src");
                        String s = path.toAbsolutePath().toString();
                        if (s.contains("/")){s+="/";}else{s+="\\";}
                        path = FileSystems.getDefault().getPath(s+"Client");
                        s = path.toAbsolutePath().toString();
                        if (s.contains("/")){s+="/";}else{s+="\\";}
                        path = FileSystems.getDefault().getPath(s+"Client.java");
                        s = path.toAbsolutePath().toString();
                        System.out.println("Current relative path is: " + s);

                        String code = Files.readString(path, StandardCharsets.US_ASCII)+"\n";
                        System.out.println(code);

                        String endOfCode = "...\n";
                        response = language+code+endOfCode;
                        writer.write(response);
                        writer.flush();
                    break;
                    case "receive peers":

                    break;
                    default:
                        System.out.println("Request not recognized");
                }
            }
            reader.close();
            writer.close();
        }
        catch(IOException e){
            e.printStackTrace();

        }
    }


    public void start() throws IOException{

        Socket sock = new Socket(serverIP, port);
        handleRequest(sock);
        sock.close();


    }
}

Sat Jan 23 16:12:28 MST 2021
java
package Client;

import java.io.*;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

public class Client {
    private String serverIP = "localhost";
    private int port = 12345;

    BufferedReader reader;
    BufferedWriter writer;
    public Client(String serverIP, int port){
        this.serverIP = serverIP;
        this.port = port;
    }

    private void handleRequest(Socket sock){

        try{
            reader = new BufferedReader(new InputStreamReader(sock.getInputStream()));
            writer = new BufferedWriter(new OutputStreamWriter(sock.getOutputStream()));
            String request;
            while ((request = reader.readLine()) != null){
                System.out.println(request);
                String response = "";

                switch(request) {
                    case "get team name":
                        response = "Steve and Issack\n";
                        System.out.println("Writing response now: " + response);
                        writer.write(response);
                        writer.flush();
                    break;
                    case "get code":

                        Path p = Paths.get("Client.java");
                        Path folder = FileSystems.getDefault().getPath(new String("./")).toAbsolutePath().getParent();

                        System.out.println(folder.toString());



                        String language = "java\n";

                        Path path = FileSystems.getDefault().getPath("src");
                        String s = path.toAbsolutePath().toString();
                        if (s.contains("/")){s+="/";}else{s+="\\";}
                        path = FileSystems.getDefault().getPath(s+"Client");
                        s = path.toAbsolutePath().toString();
                        if (s.contains("/")){s+="/";}else{s+="\\";}
                        path = FileSystems.getDefault().getPath(s+"Client.java");
                        s = path.toAbsolutePath().toString();
                        System.out.println("Current relative path is: " + s);

                        String code = Files.readString(path)+"\n";
                        System.out.println(code);

                        String endOfCode = "...\n";
                        response = language+code+endOfCode;
                        writer.write(response);
                        writer.flush();

                    break;
                    case "receive peers":

                    break;
                    default:
                        System.out.println("Request not recognized");
                }
            }
            reader.close();
            writer.close();
        }
        catch(IOException e){
            e.printStackTrace();

        }
    }


    public void start() throws IOException{

        Socket sock = new Socket(serverIP, port);
        handleRequest(sock);
        sock.close();


    }
}

